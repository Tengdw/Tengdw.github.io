<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[选择&循环]]></title>
      <url>/2017/10/16/Java%E9%80%89%E6%8B%A9&amp;%E5%BE%AA%E7%8E%AF/</url>
      <content type="html"><![CDATA[<h3 id="单分支选择结构-if"><a href="#单分支选择结构-if" class="headerlink" title="单分支选择结构( if )"></a>单分支选择结构( if )</h3><p><strong>if选择结构是根据条件判断之后再做处理</strong></p>
<div id="flowchart-0" class="flow-chart"></div>

<h3 id="if-else多重选择结构"><a href="#if-else多重选择结构" class="headerlink" title="if-else多重选择结构"></a>if-else多重选择结构</h3><div id="flowchart-1" class="flow-chart"></div>

<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><div id="flowchart-2" class="flow-chart"></div>

<h3 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h3><div id="flowchart-3" class="flow-chart"></div>


<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><div id="flowchart-4" class="flow-chart"></div>

<h3 id="continue与break"><a href="#continue与break" class="headerlink" title="continue与break"></a>continue与break</h3><ul>
<li>在程序中，如果程序执行过程中碰到break，则跳出循环。</li>
<li>在程序执行过程中，如果碰到continue，则结束本次循环，继续下一轮循环。<br><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 代码
op=>operation: 代码块
cond=>condition: 条件?
e=>end: 代码

st->cond->op->e
cond(yes)->op
cond(no)->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">st=>start: 代码...
op=>operation: 代码块1
op1=>operation: 代码块2
cond=>condition: 条件?
e=>end: 代码...

st->cond->op->e
cond(yes)->op
cond(no)->op1->e</textarea><textarea id="flowchart-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script><textarea id="flowchart-2-code" style="display: none">st=>start: 开始循环
cond=>condition: 循环条件
op=>operation: 循环操作
e=>end: 循环结束

st->cond->op->cond
cond(yes)->op
cond(no)->e</textarea><textarea id="flowchart-2-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-2-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-2-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-2", options);</script><textarea id="flowchart-3-code" style="display: none">st=>start: 开始循环
cond=>condition: 循环条件
op=>operation: 循环操作
e=>end: 循环结束

st->op->cond
cond(yes)->op
cond(no)->e</textarea><textarea id="flowchart-3-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-3-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-3-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-3", options);</script><textarea id="flowchart-4-code" style="display: none">st=>start: 开始循环
cond=>condition: 判断条件
op=>operation: 循环体
op1=>operation: 循环变量增（减）值
op2=>operation: 赋循环变量初值
e=>end: 代码...

st->op2->cond->op->op1->op2
cond(yes)->op
cond(no)->e</textarea><textarea id="flowchart-4-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-4-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-4-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-4", options);</script></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Java学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java基本数据类型、标识符、运算符]]></title>
      <url>/2017/10/16/Java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      <content type="html"><![CDATA[<h2 id="八大基本数据类型和他们的封装类"><a href="#八大基本数据类型和他们的封装类" class="headerlink" title="八大基本数据类型和他们的封装类"></a>八大基本数据类型和他们的封装类</h2><table>
<thead>
<tr>
<th style="text-align:left">基本数据类型</th>
<th style="text-align:left">封装类</th>
<th style="text-align:left">二进制位数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">boolean(布尔型)</td>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">byte(字节)</td>
<td style="text-align:left">Byte</td>
<td style="text-align:left">8</td>
</tr>
<tr>
<td style="text-align:left">char(字符型)</td>
<td style="text-align:left">Character</td>
<td style="text-align:left">16</td>
</tr>
<tr>
<td style="text-align:left">short(短整型)</td>
<td style="text-align:left">Short</td>
<td style="text-align:left">16</td>
</tr>
<tr>
<td style="text-align:left">int(整型)</td>
<td style="text-align:left">Integer</td>
<td style="text-align:left">32</td>
</tr>
<tr>
<td style="text-align:left">long(长整型)</td>
<td style="text-align:left">Long</td>
<td style="text-align:left">64</td>
</tr>
<tr>
<td style="text-align:left">float(浮点型)</td>
<td style="text-align:left">Float</td>
<td style="text-align:left">32</td>
</tr>
<tr>
<td style="text-align:left">double(双精度)</td>
<td style="text-align:left">Double</td>
<td style="text-align:left">64</td>
</tr>
</tbody>
</table>
<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>1.标识符可以由字母、数字、下划线（_）、美元符（$）组成，但不能包含 @、            %、空格等其它特殊字符，不能以数字开头。<br>2.标识符不能是 Java 关键字和保留字（ Java 预留的关键字，以后的升级版本中有可能作为关键字），但可以包含关键字和保留字。<br>3.标识符是严格区分大小写的。例如：tengdw 与 Tengdw 是两个不同的标识符。</p>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul>
<li>关系运算符：== != &gt; &gt;= &lt; &lt;= </li>
<li>逻辑运算符：&amp;&amp; || ! &amp; |</li>
<li>赋值运算符：= += -= *= /= …</li>
<li>算术运算符：+ - * / % – ++ </li>
</ul>
]]></content>
      
        <categories>
            
            <category> Java学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS常用基础命令整理]]></title>
      <url>/2017/10/15/CentOS%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<p>CentOS（Community Enterprise Operating System，中文意思是：社区企业操作系统）是Linux发行版之一，它是来自于Red Hat Enterprise Linux依照开放源代码规定释出的源代码所编译而成。由于出自同样的源代码，因此有些要求高度稳定性的服务器以CentOS替代商业版的Red Hat Enterprise Linux使用。两者的不同，在于CentOS并不包含封闭源代码软件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Linux命令格式：命令 [选项] [参数]</div></pre></td></tr></table></figure></p>
<h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><p>查询目录中的内容：ls [选项] [文件或目录]<br>选项：</p>
<ul>
<li>-a 显示所有文件，包括隐藏文件</li>
<li>-t 显示所有文件，并以更改时间排序</li>
<li>-l    显示详细信息(ls -l = ll)</li>
<li>-h    人性化显示文件大小</li>
<li>-i    显示inode</li>
<li>-s   显示所有文件，并且以区块为单位的形式表示文件和目录大小</li>
<li>-R   显示所有文件，并将所有子目录的文件都列出来</li>
</ul>
<h2 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h2><p>建立目录：mkdir -p [目录名] </p>
<ul>
<li>-p 递归创建(例：mkdir -p abc/def)</li>
<li>命令英文原意：make directories</li>
</ul>
<h2 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h2><p>切换所在目录：cd  [目录]</p>
<ul>
<li>命令英文原意：change directory</li>
<li>cd ~    进入当前用户的home目录</li>
<li>cd –    进入上次目录</li>
<li>cd ..    进入上一级目录</li>
<li>cd .    进入当前目录</li>
</ul>
<h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><ul>
<li>Linux靠权限来识别文件类型</li>
<li>–rw-r-r–</li>
<li>–文件类型（-文件 &nbsp; d 目录 &nbsp; i 软链接文件）</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">rw-</th>
<th style="text-align:left">r–</th>
<th style="text-align:left">r-</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">u所有者</td>
<td style="text-align:left">g所属组</td>
<td style="text-align:left">o其他人</td>
</tr>
<tr>
<td style="text-align:left">r读</td>
<td style="text-align:left">w写</td>
<td style="text-align:left">x执行</td>
</tr>
</tbody>
</table>
<h3 id="相对路径与绝对路径"><a href="#相对路径与绝对路径" class="headerlink" title="相对路径与绝对路径"></a>相对路径与绝对路径</h3><ul>
<li>相对路径：参照当前所在目录，进行查找 <blockquote>
<p>如：[root@valleyecho ~]# cd ../var/www/html/</p>
</blockquote>
</li>
<li>绝对路径：从根目录开始指定，一级一级递归查找。在任何目录下都能进入指定位置 <blockquote>
<p>如：[root@valleyecho ~]# cd /var/</p>
</blockquote>
</li>
</ul>
<h2 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h2><p>删除空目录：rmdir [目录名]<br>命令英文原意：remove empty directories<br><em>只能删除空目录</em></p>
<h2 id="rm-rf"><a href="#rm-rf" class="headerlink" title="rm -rf"></a>rm -rf</h2><p>删除文件或目录：rm -rf [文件或目录]<br>命令英文原意：remove<br>选项：</p>
<ul>
<li>-r 删除目录</li>
<li>-f 强制（force）</li>
</ul>
<h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><p>复制命令：cp [选项] [原文件或目录] [目标目录]<br>命令英文原意：copy<br>选项：</p>
<ul>
<li>-r 复制目录</li>
<li>-p 连带文件属性复制</li>
<li>-d 若源文件是链接文件，则复制链接属性</li>
<li>-a 相当于 -pdr</li>
</ul>
<h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h2><p>剪切命令：mv  [原文件或目录] [目标目录]<br>命令英文原意：move<br><strong>mv  [原文件名或目录名] [新的文件名或目录名]  #实现重命名操作</strong></p>
<h2 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h2><p>链接命令：ln  [原文件] [目标文件]<br>命令英文原意：link<br>功能描述：生成链接文件<br>选项：</p>
<ul>
<li>-s 创建软链接</li>
</ul>
<h3 id="硬链接与软链接"><a href="#硬链接与软链接" class="headerlink" title="硬链接与软链接"></a>硬链接与软链接</h3><ul>
<li>硬链接特征：<ol>
<li>拥有相同的i节点和存储block块，可以看做是同一个文件</li>
<li>可通过i节点识别</li>
<li>不能跨分区</li>
<li>不能针对目录使用</li>
</ol>
</li>
<li>软链接特征：<ol>
<li>类似Windows快捷方式</li>
<li>软链接拥有自己的i节点和block块，但是 数据块中只保存源文件的文件名和i节点号，并没有实际的文件数据</li>
<li>lrwxrwxrwx &nbsp; l 软链接 软链接文件权限都为rwxrwxrwx</li>
<li>修改任意文件，另一个都改变</li>
<li>删除原文件，软链接不能使用</li>
</ol>
</li>
</ul>
<h2 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h2><p>文件搜索命令：locate  [文件名]<br>在后台数据库中按文件名搜索，搜索速度更快</p>
<ul>
<li>/var/lib/mlocate   &nbsp;   #locate命令所搜索的后台数据库</li>
<li>updatedb  &nbsp; #更新数据库</li>
</ul>
<h2 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h2><p>搜索命令的命令：whereis</p>
<ul>
<li>whereis 命令名  &nbsp;  #搜索命令所在路径及帮助文档所在位置</li>
<li>-b    只查找可执行文件</li>
<li>-m    只查找帮助文件</li>
</ul>
<h2 id="which"><a href="#which" class="headerlink" title="which"></a>which</h2><p>搜索命令的命令：which</p>
<ul>
<li>which    命令名  &nbsp;  #搜索命令所在路径及别名</li>
</ul>
<h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>搜索命令：find</p>
<ul>
<li>find [搜索范围] [搜索条件]    #搜索文件</li>
<li>find / -name install.log<br><em>避免大范围搜索，会非常耗费系统资源</em><br><em>find是在系统当中搜索符合条件的文件名。如果需要匹配使用通配符，通配符是完全匹配的</em><br>Linux中的通配符：<ol>
<li>* 匹配任意内容</li>
<li>? 匹配任意一个字符</li>
<li>[] 匹配任意一个中括号内的字符</li>
</ol>
</li>
<li>find /toot -iname install.log  &nbsp;  #不区分大小写</li>
<li>find /root -user root  &nbsp;  #按照所有者搜索</li>
<li>find /root -nouser  &nbsp;  #查找没有所有者的文件</li>
<li>find /var/log/ -mtime +10  &nbsp;  #查找10天前修改的文件<blockquote>
<p>-10    10天内修改的文件<br>10    10天当天内修改的文件<br>+10    10前内修改的文件<br>atime    文件访问时间<br>ctime    改变文件属性<br>mtime    修改文件内容</p>
</blockquote>
</li>
<li>find . -size 25k    #查找文件大小是25kb的文件（小k，大M）<blockquote>
<p>-25  &nbsp;  小于25kb的文件<br>25   &nbsp;  等于25kb的文件<br>+25  &nbsp; 大于25kb的文件</p>
</blockquote>
</li>
<li>find . -inum 262422  &nbsp;  #查找i节点是262422的文件</li>
<li>find /etc -size +20k -a -size -50k  &nbsp;  #查找/etc/目录下，大于20kb并且小于50kb的文件<blockquote>
<p>-a  &nbsp;  and    逻辑与，两个条件都满足<br>-o  &nbsp;  or    逻辑或，两个条件满足一个即可</p>
</blockquote>
</li>
<li>find /etc -size +20k -a -size -50k -exec ls -lh {} \;<br>查找/etc/目录下，大于20kb并且小于50kb的文件,并显示详细信息<br>-exec 与 {} \;是配对使用的，固定格式,对操作结果执行操作</li>
</ul>
<h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>搜索字符串命令：grep<br>grep [选项] 字符串 文件名  &nbsp;  #在文件当中匹配符合条件的字符串<br>选项：</p>
<ul>
<li>-i 忽略大小写</li>
<li>-v 排除指定字符串</li>
</ul>
<h2 id="man"><a href="#man" class="headerlink" title="man"></a>man</h2><p>帮助命令</p>
<ul>
<li>man [选项] [参数]  &nbsp;  #获取指定命令的帮助</li>
<li>例：man ls  &nbsp;  #查看ls的帮助</li>
<li>[命令] -  -help  &nbsp;  #获取命令选项的帮助 例：ls - -help</li>
</ul>
<h2 id="压缩与解压缩命令"><a href="#压缩与解压缩命令" class="headerlink" title="压缩与解压缩命令"></a>压缩与解压缩命令</h2><p>Linux常用压缩格式：.zip  &nbsp;  .gz  &nbsp;  .bz2<br>常用压缩格式：.tar.gz  &nbsp;  .tar.bz2</p>
<h2 id="zip格式压缩与解压缩"><a href="#zip格式压缩与解压缩" class="headerlink" title=".zip格式压缩与解压缩"></a>.zip格式压缩与解压缩</h2><ul>
<li>zip [压缩文件名.zip] [源文件名]  &nbsp;  #压缩文件</li>
<li>zip -r [压缩文件名.zip] [源目录]  &nbsp;  #压缩目录</li>
<li>unzip [压缩文件名]  &nbsp;  #解压缩.zip文件</li>
</ul>
<h2 id="gz格式压缩"><a href="#gz格式压缩" class="headerlink" title=".gz格式压缩"></a>.gz格式压缩</h2><ul>
<li>gzip [源文件名]  &nbsp;  #压缩为.gz格式的压缩文件，源文件会消失</li>
<li>gzip -c [源文件名] &gt; [压缩文件名.gz]  &nbsp;  #压缩为.gz格式，源文件保留</li>
<li>gzip -r [目录名]  &nbsp;  #压缩目录下所有的子文件，但是不能压缩目录</li>
</ul>
<h2 id="bz2格式压缩与解压缩"><a href="#bz2格式压缩与解压缩" class="headerlink" title=".bz2格式压缩与解压缩"></a>.bz2格式压缩与解压缩</h2><ul>
<li>bzip2 [源文件名]  &nbsp;  #压缩为.bz2格式，不保留源文件</li>
<li>bzip2 -k [源文件名]  &nbsp;  #压缩之后保留原文件</li>
<li>注意：bzip2命令不能压缩目录</li>
<li>bzip2 -d [压缩文件名]  &nbsp;  #解压缩，-k保留压缩文件</li>
<li>bunzip2 [压缩文件名]  &nbsp;  #解压缩，-k保留压缩文件</li>
</ul>
<h2 id="打包与解打包"><a href="#打包与解打包" class="headerlink" title="打包与解打包"></a>打包与解打包</h2><ul>
<li>tar -cvf  [打包文件名.tar]  [源文件名]<br>选项：</li>
<li>-c  打包</li>
<li>-v  显示过程</li>
<li>-f  指定打包后的文件名</li>
<li>tar -xvf [打包文件名]  #-x   解打包</li>
</ul>
<h2 id="tar-gz压缩与解压缩"><a href="#tar-gz压缩与解压缩" class="headerlink" title=".tar.gz压缩与解压缩"></a>.tar.gz压缩与解压缩</h2><ul>
<li>.tar.gz格式是先打包为.tar格式，在压缩为.gz格式</li>
<li>tar -zcvf [(可加其他目录)压缩包名.tar.gz] [源文件] &nbsp; #-z   压缩为 .tar.gz格式</li>
<li>tar -zxvf [压缩包名.tar.gz] &nbsp; #-x  解压缩.tar.gz格式</li>
<li>tar -zxvf [压缩包名.tar.bz2] -C [目标目录] &nbsp; #解压文件到目标目录</li>
</ul>
<h2 id="tar-bz2压缩与解压缩"><a href="#tar-bz2压缩与解压缩" class="headerlink" title=".tar.bz2压缩与解压缩"></a>.tar.bz2压缩与解压缩</h2><ul>
<li>tar -jcvf [压缩包名.tar.bz2] [源文件] &nbsp; #-z   压缩为 .tar.bz2格式</li>
<li>tar -jxvf [压缩包名.tar.bz2] &nbsp; #-x    解压缩.tar.bz2格式</li>
</ul>
<h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><ul>
<li>w  &nbsp;  #查看用户登录信息（详细）</li>
<li>who [用户名] &nbsp; #查看用户登录信息</li>
<li>last &nbsp; #查询当前登录和过去登录的用户信息</li>
<li>lastlog &nbsp; #查看所有用户的最后一次登录时间</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[梅林安装ss插件]]></title>
      <url>/2017/10/15/%E6%A2%85%E6%9E%97%E5%AE%89%E8%A3%85ss%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>前几天给K3刷了梅林固件（LEDE用起来太麻烦了），由于现在严查番羽墙梅林软件中心的ss插件被迫下架了，所以需要手动安装</p>
<ol>
<li>先启用梅林的SSH：系统管理-&gt;系统设置-&gt;SSH Daemon-&gt;Allow SSH Port Forwarding 选是再点击应用本页面设置</li>
<li>用SSH客户端登录（地址：路由器的默认网关；用户名：默认是admin；密码：路由器的管理密码）然后一句一句执行下面命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd /tmp</div><div class="line">wget http://valleyecho-1252960615.cosgz.myqcloud.com/shadowsocks.tar.gz</div><div class="line">tar -zxvf /tmp//shadowsocks.tar.gz    #解压</div><div class="line">chmod +x /tmp/shadowsocks/install.sh    #授予执行权限</div><div class="line">sh /tmp/shadowsocks/install.sh    #执行</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 硬件玩家 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 路由器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[多重循环&数组]]></title>
      <url>/2017/10/14/%E5%A4%9A%E9%87%8D%E5%BE%AA%E7%8E%AF-%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<h2 id="多重循环"><a href="#多重循环" class="headerlink" title="多重循环"></a>多重循环</h2><p>循环体中包含循环语句的结构称为多重循环。三种循环语句(while;do…while;for)可以自身嵌套，也可以相互嵌套，最常见的就是二重循环。在二重循环中，外层循环每执行一次，内层循环要执行一圈。</p>
<blockquote>
<p>例：打印10*10的点阵</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">for (int i = 1; i &lt;= 10; i++) &#123;</div><div class="line">	for (int j = 0; j &lt;= 10; j++) &#123;</div><div class="line">		System.out.print(&quot;* &quot;);</div><div class="line">	&#125;</div><div class="line">	System.out.println();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>控制台输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">* * * * * * * * * * * </div><div class="line">* * * * * * * * * * * </div><div class="line">* * * * * * * * * * * </div><div class="line">* * * * * * * * * * * </div><div class="line">* * * * * * * * * * * </div><div class="line">* * * * * * * * * * * </div><div class="line">* * * * * * * * * * * </div><div class="line">* * * * * * * * * * * </div><div class="line">* * * * * * * * * * * </div><div class="line">* * * * * * * * * * *</div></pre></td></tr></table></figure></p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是一个变量，存储相同数据类型的一组数据<br><em>数组的声明：</em></p>
<ol>
<li>声明一个变量是在内存空间划分出一块合适的空间</li>
<li>声明一个数组是在内存空间划出一串连续的空间<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int arr[];    //声明数组名</div><div class="line">arr = new int[5]    //分配5个数的存储空间</div><div class="line">arr[0]=2; arr[1]=4; ... ...arr[4]=4;    //赋值</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Java学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java OOP]]></title>
      <url>/2017/10/14/Java-OOP/</url>
      <content type="html"><![CDATA[<p>Java OOP ( Object Oriented Program——面向对象编程 )，OOP的四大支柱：继承、封装、多态、抽象</p>
<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><ol>
<li>类(Class)：定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作。在Java中类包括属性和方法（构造方法）；构造方法没有返回值类型，也不能有返回值。父类中的构造方法不能被子类继承，即便它是public的</li>
<li>对象：是类的实例。对象可以用来调用类里面的方法。</li>
</ol>
<h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><ol>
<li>如果函数有相同的名称和返回值，而有不同的参数个数或参数类型，则这些函数就是重载函数。</li>
<li>方法重载也称为静态多态。</li>
<li>重载的三个特征：方法名相同、参数不同（包括参数数量不同、类型不同、顺序不同）、同一作用域。</li>
</ol>
<h2 id="继承-extends"><a href="#继承-extends" class="headerlink" title="继承(extends)"></a>继承(extends)</h2><ol>
<li>继承的方法允许在不改动原程序的基础上对其进行扩充，这样使得原功能得以保存，而新功能也得以扩展。这有利于减少重复编码，提高软件的开发效率。</li>
<li>一个类可以继承其它类的成员，被继承的类叫基类或父类；继承类叫派生类或子类。</li>
<li>派生类不但拥有自己的成员变量和成员函数，还拥有父类的成员变量和成员函数。</li>
</ol>
<h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><ol>
<li>父类与子类之间的多态性，对父类的函数进行重新定义。如果在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被重写(Overriding)。在Java中，子类可继承父类中的方法，而不需要重新编写相同的方法。但有时子类并不想原封不动地继承父类的方法，而是想作一定的修改，这就需要采用方法的重写。方法重写又称方法覆盖。</li>
<li>若子类中的方法与父类中的某一方法具有相同的方法名、返回类型和参数表，则新方法将覆盖原有的方法。如需父类中原有的方法，可使用super关键字，该关键字引用了当前类的父类。</li>
<li>子类函数的访问修饰权限不能少于父类的。</li>
</ol>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ol>
<li>多态存在的三个必要条件：继承、重写、父类引用指向子类对象</li>
<li>多态的优点：消除类型之间的耦合关系、可替换性、可扩充性、接口性、灵活性、简化性</li>
</ol>
<h2 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h2><ol>
<li>抽象类：class前面用abstract修饰、在方法前面加上abstract关键字，且没有实现、如果某各类中有抽象方法，这个类就是抽象方法</li>
<li>抽象类特点：子类如果不实现父类的抽象方法，那么子类也是抽象类、不能创建对象，但是可以引用子类对象</li>
<li>接口：定义语法：public interface 接口名{} 、接口中只能包含常量属性和未实现的方法</li>
<li>接口的特点：接口的所有属性和方法必须用public修饰、不能new对象、接口可以继承多个接口</li>
</ol>
<h2 id="final和static修饰符"><a href="#final和static修饰符" class="headerlink" title="final和static修饰符"></a>final和static修饰符</h2><ol>
<li>final：修饰属性：此变量不能被修改，一般是常量的修饰符；修饰方法：此方法不能被覆盖；修饰类：此类不能被继承。</li>
<li>static：静态；在一个类中被修饰的变量和方法不需要引用可以直接调用。</li>
</ol>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//懒汉式单例类.在第一次调用的时候实例化自己   </span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton single=<span class="keyword">null</span>;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">         <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;    </div><div class="line">             single = <span class="keyword">new</span> Singleton();  </div><div class="line">         &#125;    </div><div class="line">        <span class="keyword">return</span> single;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">//饿汉式单例类.在类初始化时，已经自行实例化   </span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;&#125;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton1 single = <span class="keyword">new</span> Singleton1();  </div><div class="line">    <span class="comment">//静态工厂方法   </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> single;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/10/13/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
